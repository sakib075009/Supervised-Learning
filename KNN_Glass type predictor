import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier


class GlassTypePredictor:
    """
    GlassTypePredictor class that predicts glass type
    """

    def __init__(self, data_url='D:\GB Machine Larning Online Course\datasets collection\ikhtiyar files\selected2\selected2\glass type identification method by KNN\glass_data.csv'):
        self._data_url = data_url
        self._data = self._get_data()
        cols = list(self._data.head())
        self._features = cols[:-1]
        self._results = cols[-1]
        self._model = KNeighborsClassifier(n_neighbors=11, p=2, metric='euclidean')
        x_train, x_test, y_train, y_test = self._split_test_train_data()
        self._train_model(x_train, y_train)
        self._test_model(x_test, y_test)

    def _get_data(self):
        """
        Returns data from the data url
        :return: DataFrame object
        """
        return pd.read_csv(self._data_url, na_values=['', ' ']).dropna()

    def _get_features(self):
        """
        Returns features from the input data

        :return: List[List[int]]
        """
        return self._data[self._features].values

    def _get_results(self):
        """
        Returns results from the input data

        :return: List[List[int]]
        """
        return self._data[self._results].values

    def _train_model(self, x_train, y_train):
        """
        Takes x_train and y_train data and trains model accordingly

        :param x_train: List[List[int]]
        :param y_train: List[List[int]]
        :return: None
        """
        self._model.fit(x_train, y_train)

    def _test_model(self, x_test, y_test):
        """
        Takes x_test and y_test data and tests model accordingly

        :param x_test: List[List[int]]
        :param y_test: List[List[int]]
        :return: None
        """
        self._model.score(x_test, y_test)

    def _split_test_train_data(self):
        """
        Splits train and test data from the input data

        :return: tuples(x_train, y_train, x_test, y_test)
        """
        return train_test_split(self._get_features(), self._get_results(), test_size=0.30)

    def predict_type(self, features):
        """
        Takes features as input and returns your predicted glass type

        :param features: List[int]
        :return: List[str]
        """
        return self._model.predict([features])


if __name__ == '__main__':
    predictor = GlassTypePredictor()
    predictions = int(input("How many predictions?: "))
    while predictions:
        feat1 = float(input("Enter Feature1: "))
        feat2 = float(input("Enter Feature2: "))
        feat3 = float(input("Enter Feature3: "))
        feat4 = float(input("Enter Feature4: "))
        feat5 = float(input("Enter Feature5: "))
        feat6 = float(input("Enter Feature6: "))
        feat7 = float(input("Enter Feature7: "))
        feat8 = float(input("Enter Feature8: "))
        feat9 = float(input("Enter Feature9: "))
        feat10 = float(input("Enter Feature10: "))

        predicted_result = predictor.predict_type(
            [feat1, feat2, feat3, feat4, feat5, feat6, feat7, feat8, feat9, feat10])
        print("Your Glass type is {}".format(predicted_result[0]))
        predictions -= 1
